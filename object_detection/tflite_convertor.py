import numpy as np
import tensorflow as tf

from data_augmentation import RandomColorAugmentation, Cutout
from train import build_model
from tflite_support.metadata_writers import object_detector
from tflite_support.metadata_writers import writer_utils


def build_model_for_inference_only(model_name):
    """
    One input:
      image: a float32 tensor of shape[1, height, width, 3] containing the
      *normalized* input image.
      NOTE: See the `preprocess` function defined in the feature extractor class
      in the object_detection/models directory.

    Four Outputs:
      detection_boxes: a float32 tensor of shape [1, num_boxes, 4] with box locations
      detection_classes: a float32 tensor of shape [1, num_boxes] with class indices
      detection_scores: a float32 tensor of shape [1, num_boxes] with class scores
      num_boxes: a float32 tensor of size 1 containing the number of detected boxes
    """
    model: tf.keras.Model = tf.keras.models.load_model(f"weights/{model_name}.h5", custom_objects={
        'RandomColorAugmentation': RandomColorAugmentation,
        'Cutout': Cutout
    }, compile=False)
    pruned_model: tf.keras.Model = build_model(inference_only=True)
    for layer in pruned_model.layers:

        if "Div" in layer.name or "Sub" in layer.name:
            continue
        layer.set_weights(model.get_layer(layer.name).get_weights())
    return pruned_model


def convert_model(model_name):
    converter = tf.lite.TFLiteConverter.from_keras_model(build_model_for_inference_only("model_v26"))
    tflite_model = converter.convert()
    _MODEL_PATH = f"tflite/{model_name}.tflite"

    with open(_MODEL_PATH, 'wb') as f:
        f.write(tflite_model)

    ObjectDetectorWriter = object_detector.MetadataWriter
    _LABEL_FILE = "data/labels.txt"
    _SAVE_TO_PATH = _MODEL_PATH

    _INPUT_NORM_MEAN = 127.5
    _INPUT_NORM_STD = 127.5

    # Create the metadata writer.
    writer = ObjectDetectorWriter.create_for_inference(
        writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD],
        [_LABEL_FILE])

    # Verify the metadata generated by metadata writer.
    print(writer.get_metadata_json())

    # Populate the metadata into the model.
    writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)


if __name__ == '__main__':
    model_name = "model_v26"
    #convert_model(model_name)
    build_model_for_inference_only(model_name).summary()
